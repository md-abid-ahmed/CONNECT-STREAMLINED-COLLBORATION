import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  Brush
} from 'recharts';
import { CSVLink } from 'react-csv';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import './Latestappover.css';

interface AppOption {
  value: string;
  label: string;
}

interface UtilizationData {
  app: string;
  datetime: string;
  instance: number;
  instance_type: string;
  state: string;
  value: number;
}

interface ProcessedData {
  name: string;
  [key: string]: number | string;
}

const Latestappover: React.FC = () => {
  const [appOptions, setAppOptions] = useState<AppOption[]>([]);
  const [selectedAppId, setSelectedAppId] = useState<string>('');
  const [startDate, setStartDate] = useState<Date | undefined>(undefined);
  const [endDate, setEndDate] = useState<Date | undefined>(undefined);
  const [utilizationData, setUtilizationData] = useState<UtilizationData[]>([]);
  const [dateRangeType, setDateRangeType] = useState<'daily' | 'weekly' | 'monthly'>('daily');
  const [showInsights, setShowInsights] = useState(false);
  const [selectedInstances, setSelectedInstances] = useState<number[]>([]);
  const [viewMode, setViewMode] = useState<'all' | 'selected'>('all');

  useEffect(() => {
    fetchApps();
  }, []);

  useEffect(() => {
    if (selectedAppId && startDate && endDate) {
      fetchUtilizationData();
    }
  }, [selectedAppId, startDate, endDate]);

  const fetchApps = async () => {
    try {
      const response = await axios.get('/fetch_apps');
      if (response.data && Array.isArray(response.data.Data)) {
        const apps = response.data.Data.map((app: { _id: string }) => ({
          value: app._id,
          label: `AppID: ${app._id}`
        }));
        setAppOptions(apps);
      } else {
        console.error('Unexpected response format from /fetch_apps');
      }
    } catch (error) {
      console.error('Error fetching apps:', error);
    }
  };

  const formatDate = (date: Date): string => {
    return date.toISOString().slice(0, 19).replace('T', ' ') + '.00';
  };

  const getWeekRange = (date: Date): { start: Date; end: Date } => {
    const start = new Date(date);
    start.setDate(date.getDate() - date.getDay() + (date.getDay() === 0 ? -6 : 1)); // Adjust to Monday
    const end = new Date(start);
    end.setDate(start.getDate() + 6); // Set to Sunday
    return { start, end };
  };

  const getMonthRange = (date: Date): { start: Date; end: Date } => {
    const start = new Date(date.getFullYear(), date.getMonth(), 1);
    const end = new Date(date.getFullYear(), date.getMonth() + 1, 0);
    return { start, end };
  };

  const fetchUtilizationData = async () => {
    if (!selectedAppId || !startDate || !endDate) return;

    const postData = {
      appID: selectedAppId,
      from_time: formatDate(startDate),
      to_time: formatDate(endDate)
    };

    try {
      const response = await axios.post('/fetch_utilisation', postData);
      if (response.data && Array.isArray(response.data.data)) {
        setUtilizationData(response.data.data);
      } else {
        console.error('Unexpected response format from /fetch_utilisation');
      }
    } catch (error) {
      console.error('Error fetching utilization data:', error);
    }
  };

  const handleCalculate = () => {
    if (!startDate) return;

    let calculatedStartDate: Date;
    let calculatedEndDate: Date;

    if (dateRangeType === 'daily') {
      calculatedStartDate = new Date(startDate);
      calculatedEndDate = endDate ? new Date(endDate) : new Date(startDate);
    } else if (dateRangeType === 'weekly') {
      const weekRange = getWeekRange(startDate);
      calculatedStartDate = weekRange.start;
      calculatedEndDate = weekRange.end;
    } else if (dateRangeType === 'monthly') {
      const monthRange = getMonthRange(startDate);
      calculatedStartDate = monthRange.start;
      calculatedEndDate = monthRange.end;
    } else {
      return; // Invalid date range type
    }

    setStartDate(calculatedStartDate);
    setEndDate(calculatedEndDate);
    fetchUtilizationData();
  };

  const processUtilizationData = (): ProcessedData[] => {
    const dataMap: { [key: string]: ProcessedData } = {};

    utilizationData.forEach(item => {
      const itemDate = new Date(item.datetime);
      if (startDate && endDate && itemDate >= startDate && itemDate <= endDate) {
        if (!dataMap[item.datetime]) {
          dataMap[item.datetime] = { name: item.datetime };
        }
        dataMap[item.datetime][`Instance ${item.instance}`] = item.value;
      }
    });

    return Object.values(dataMap);
  };

  const calculateInsights = () => {
    if (utilizationData.length === 0) return { averageUsage: '0', maxUsageDay: 'N/A', minUsageDay: 'N/A' };

    const totalUsage = utilizationData.reduce((acc, d) => acc + d.value, 0);
    const averageUsage = totalUsage / utilizationData.length;
    const maxUsageDay = utilizationData.reduce((max, d) => d.value > max.value ? d : max, utilizationData[0]);
    const minUsageDay = utilizationData.reduce((min, d) => d.value < min.value ? d : min, utilizationData[0]);

    return {
      averageUsage: averageUsage.toFixed(2),
      maxUsageDay: `${maxUsageDay.datetime} (${maxUsageDay.value}%)`,
      minUsageDay: `${minUsageDay.datetime} (${minUsageDay.value}%)`,
    };
  };

  const processedData = processUtilizationData();

  const calculateStats = () => {
    const allValues = processedData.flatMap(item => 
      Object.entries(item)
        .filter(([key]) => {
          if (viewMode === 'all') return key.startsWith('Instance');
          return key.startsWith('Instance') && selectedInstances.includes(parseInt(key.split(' ')[1]));
        })
        .map(([, value]) => value as number)
    );

    const peakLoad = allValues.length > 0 ? Math.max(...allValues) : 0;
    const minLoad = allValues.length > 0 ? Math.min(...allValues) : 0;
    const costIncurred = allValues.reduce((acc, val) => acc + val * 0.5, 0);

    return { peakLoad, minLoad, costIncurred };
  };

  const { peakLoad, minLoad, costIncurred } = calculateStats();

  const potentialSavings = processedData.reduce((acc, d) => 
    acc + Object.values(d)
      .filter((v): v is number => typeof v === 'number' && v < 50)
      .reduce((sum, v) => sum + v * 0.5 * 0.3, 0)
  , 0);

  const exportData = processedData.map(d => ({ ...d, instance: 'all instances' }));

  const instances = Array.from(new Set(utilizationData.map(d => d.instance)));

  const handleInstanceChange = (instance: number) => {
    setSelectedInstances(prev => 
      prev.includes(instance) 
        ? prev.filter(i => i !== instance)
        : [...prev, instance]
    );
    setViewMode('selected');
  };

  const handleViewModeChange = (mode: 'all' | 'selected') => {
    setViewMode(mode);
    if (mode === 'all') {
      setSelectedInstances([]);
    }
  };

  return (
    <div className="app-container">
      <div className="app-overview">
        <div className="header">
          <div className="top-row">
            <div className="app-selector">
              <select
                value={selectedAppId}
                onChange={(e) => setSelectedAppId(e.target.value)}
              >
                <option value="" disabled>Select App ID</option>
                {appOptions.map(({ value, label }) => (
                  <option key={value} value={value}>{label}</option>
                ))}
              </select>
            </div>
            <div className="date-range">
              <DatePicker
                selected={startDate}
                onChange={(date: Date | null) => setStartDate(date ?? undefined)}
                selectsStart
                startDate={startDate}
                endDate={endDate}
                placeholderText="Start Date"
              />
              <DatePicker
                selected={endDate}
                onChange={(date: Date | null) => setEndDate(date ?? undefined)}
                selectsEnd
                startDate={startDate}
                endDate={endDate}
                minDate={startDate}
                placeholderText="End Date"
              />
            </div>
            <div className="stats">
              <div className="stat">
                <span>Peak Load</span>
                <span>{peakLoad.toFixed(2)}%</span>
              </div>
              <div className="stat">
                <span>Min Load</span>
                <span>{minLoad.toFixed(2)}%</span>
              </div>
              <div className="stat">
                <span>Cost Incurred</span>
                <span>${costIncurred.toFixed(2)}</span>
              </div>
            </div>
          </div>
          <div className="bottom-row">
            <div className="date-controls">
              {['daily', 'weekly', 'monthly'].map((type) => (
                <button
                  key={type}
                  className={`date-range-btn ${dateRangeType === type ? 'active' : ''}`}
                  onClick={() => setDateRangeType(type as 'daily' | 'weekly' | 'monthly')}
                >
                  {type.charAt(0).toUpperCase() + type.slice(1)}
                </button>
              ))}
            </div>
            <button className="btn primary" onClick={handleCalculate}>Apply Filter</button>
            <button className="btn secondary" onClick={() => setShowInsights(true)}>Quick Insights</button>
          </div>
        </div>

        <div className="instance-selection">
          <div className="view-mode">
            <label>
              <input
                type="radio"
                checked={viewMode === 'all'}
                onChange={() => handleViewModeChange('all')}
              />
              All Instances
            </label>
            <label>
              <input
                type="radio"
                checked={viewMode === 'selected'}
                onChange={() => handleViewModeChange('selected')}
              />
              Selected Instances
            </label>
          </div>
          <div className="instance-checkboxes">
            {instances.map((instance) => (
              <label key={instance}>
                <input
                  type="checkbox"
                  checked={selectedInstances.includes(instance)}
                  onChange={() => handleInstanceChange(instance)}
                  disabled={viewMode === 'all'}
                />
                Instance {instance}
              </label>
            ))}
          </div>
        </div>

        <div className="chart-container">
          <ResponsiveContainer width="100%" height={400}>
            <LineChart data={processedData} margin={{ top: 20, right: 30, left: 20, bottom: 10 }}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Legend />
              {instances.map((instance, index) => (
                (viewMode === 'all' || selectedInstances.includes(instance)) && (
                  <Line
                    key={instance}
                    type="monotone"
                    dataKey={`Instance ${instance}`}
                    stroke={`hsl(${index * 360 / instances.length}, 70%, 50%)`}
                    dot={false}
                  />
                )
              ))}
              <Brush dataKey="name" height={30} stroke="#8884d8" />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {showInsights && (
          <div className="insights">
            <h3>Quick Insights</h3>
            <p>Average Usage: {calculateInsights().averageUsage}%</p>
            <p>Max Usage Day: {calculateInsights().maxUsageDay}</p>
            <p>Min Usage Day: {calculateInsights().minUsageDay}</p>
            <p>Potential Savings: ${potentialSavings.toFixed(2)}</p>
            <button className="btn secondary" onClick={() => setShowInsights(false)}>Close Insights</button>
          </div>
        )}

        <div className="export-container">
          <CSVLink data={exportData} filename={"utilization_data.csv"}>
            <button className="btn secondary">Export CSV</button>
          </CSVLink>
        </div>
      </div>
    </div>
  );
};

export default Latestappover;
