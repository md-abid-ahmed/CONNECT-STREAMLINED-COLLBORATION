import React, { useState, useEffect } from 'react';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Brush } from 'recharts';
import { CSVLink } from 'react-csv';

const AppOverview = () => {
  const [apps, setApps] = useState([]);
  const [selectedApp, setSelectedApp] = useState('');
  const [startDate, setStartDate] = useState(null);
  const [endDate, setEndDate] = useState(null);
  const [dateRangeType, setDateRangeType] = useState('daily');
  const [utilizationData, setUtilizationData] = useState([]);
  const [processedData, setProcessedData] = useState([]);
  const [showInsights, setShowInsights] = useState(false);
  const [selectedInstances, setSelectedInstances] = useState([]);
  const [instances, setInstances] = useState([]);
  const [viewMode, setViewMode] = useState('all');

  useEffect(() => {
    fetchApps();
  }, []);

  useEffect(() => {
    if (selectedApp && startDate && endDate) {
      fetchUtilizationData();
    }
  }, [selectedApp, startDate, endDate, dateRangeType]);

  const fetchApps = async () => {
    // Fetching apps logic here
  };

  const fetchUtilizationData = async () => {
    try {
      // Fetching utilization data logic here

      // Assuming fetchedData is the response data
      let filteredData = fetchedData.filter(data => {
        const date = new Date(data.timestamp);
        return date >= startDate && date <= endDate;
      });

      if (dateRangeType === 'weekly') {
        filteredData = getWeeklyData(filteredData);
      } else if (dateRangeType === 'monthly') {
        filteredData = getMonthlyData(filteredData);
      }

      setUtilizationData(filteredData);
      processData(filteredData);
    } catch (error) {
      console.error('Error fetching utilization data:', error);
    }
  };

  const getWeeklyData = (data) => {
    const startWeek = getStartOfWeek(startDate);
    const endWeek = new Date(startWeek);
    endWeek.setDate(endWeek.getDate() + 6); // End of the week

    return data.filter(item => {
      const date = new Date(item.timestamp);
      return date >= startWeek && date <= endWeek;
    });
  };

  const getMonthlyData = (data) => {
    const startMonth = new Date(startDate.getFullYear(), startDate.getMonth(), 1);
    const endMonth = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0); // End of the month

    return data.filter(item => {
      const date = new Date(item.timestamp);
      return date >= startMonth && date <= endMonth;
    });
  };

  const getStartOfWeek = (date) => {
    const day = date.getDay();
    const diff = date.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday
    return new Date(date.setDate(diff));
  };

  const processData = (data) => {
    // Process data logic here
    setProcessedData(data);
  };

  const handleDateRangeTypeChange = (type) => {
    setDateRangeType(type);
    fetchUtilizationData();
  };

  const handleInstanceChange = (instance) => {
    const newSelectedInstances = selectedInstances.includes(instance)
      ? selectedInstances.filter(i => i !== instance)
      : [...selectedInstances, instance];
    setSelectedInstances(newSelectedInstances);
  };

  const handleViewModeChange = (mode) => {
    setViewMode(mode);
  };

  return (
    <div className="app-container">
      <div className="app-overview">
        <div className="header">
          <div className="top-row">
            <div className="app-selector">
              <select onChange={(e) => setSelectedApp(e.target.value)} value={selectedApp}>
                {apps.map(app => (
                  <option key={app.id} value={app.id}>{app.name}</option>
                ))}
              </select>
            </div>
            <div className="date-range">
              <DatePicker
                selected={startDate}
                onChange={(date) => setStartDate(date)}
                selectsStart
                startDate={startDate}
                endDate={endDate}
                dateFormat="dd/MM/yyyy"
                placeholderText="Start Date"
              />
              <DatePicker
                selected={endDate}
                onChange={(date) => setEndDate(date)}
                selectsEnd
                startDate={startDate}
                endDate={endDate}
                minDate={startDate}
                dateFormat="dd/MM/yyyy"
                placeholderText="End Date"
              />
            </div>
            <div className="date-range-type">
              <button className={dateRangeType === 'daily' ? 'active' : ''} onClick={() => handleDateRangeTypeChange('daily')}>Daily</button>
              <button className={dateRangeType === 'weekly' ? 'active' : ''} onClick={() => handleDateRangeTypeChange('weekly')}>Weekly</button>
              <button className={dateRangeType === 'monthly' ? 'active' : ''} onClick={() => handleDateRangeTypeChange('monthly')}>Monthly</button>
            </div>
            <button className="fetch-data" onClick={() => fetchUtilizationData()}>Fetch Data</button>
          </div>
        </div>

        {utilizationData.length > 0 && (
          <>
            <div className="chart-container">
              <ResponsiveContainer width="100%" height={400}>
                <LineChart data={processedData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  {Object.keys(processedData[0] || {}).map((key, index) =>
                    key !== 'name' ? (
                      <Line key={index} type="monotone" dataKey={key} stroke={`#${Math.floor(Math.random() * 16777215).toString(16)}`} />
                    ) : null
                  )}
                  <Brush />
                </LineChart>
              </ResponsiveContainer>
            </div>

            <div className="insights-container">
              <h2>Insights</h2>
              <button onClick={() => setShowInsights(!showInsights)}>{showInsights ? 'Hide Insights' : 'Show Insights'}</button>
              {showInsights && (
                <div className="insights-content">
                  <p><strong>Average Usage:</strong> {calculateInsights().averageUsage}%</p>
                  <p><strong>Peak Load:</strong> {peakLoad}%</p>
                  <p><strong>Minimum Load:</strong> {minLoad}%</p>
                  <p><strong>Cost Incurred:</strong> ${costIncurred.toFixed(2)}</p>
                  <p><strong>Potential Savings:</strong> ${potentialSavings.toFixed(2)}</p>
                  <p><strong>Max Usage Day:</strong> {calculateInsights().maxUsageDay}</p>
                  <p><strong>Min Usage Day:</strong> {calculateInsights().minUsageDay}</p>
                </div>
              )}
            </div>

            <div className="instance-selector">
              <h3>Instance Selection</h3>
              <button className={viewMode === 'all' ? 'active' : ''} onClick={() => handleViewModeChange('all')}>View All Instances</button>
              <button className={viewMode === 'selected' ? 'active' : ''} onClick={() => handleViewModeChange('selected')}>View Selected Instances</button>
              <div className="instance-checkboxes">
                {instances.map(instance => (
                  <label key={instance}>
                    <input
                      type="checkbox"
                      checked={selectedInstances.includes(instance)}
                      onChange={() => handleInstanceChange(instance)}
                    />
                    Instance {instance}
                  </label>
                ))}
              </div>
            </div>

            <CSVLink data={exportData} filename="utilization_data.csv">
              <button className="export-btn">Export Data</button>
            </CSVLink>
          </>
        )}
      </div>
    </div>
  );
};

export default AppOverview;
