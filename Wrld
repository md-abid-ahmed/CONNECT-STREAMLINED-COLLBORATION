import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  Brush
} from 'recharts';
import { CSVLink } from 'react-csv';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import './AppOverview.css';

interface AppOption {
  value: string;
  label: string;
}

interface UtilizationData {
  app: string;
  datetime: string;
  instance: number;
  instance_type: string;
  state: string;
  value: number;
}

interface ProcessedData {
  name: string;
  [key: string]: number | string;
}

const AppOverview: React.FC = () => {
  const [appOptions, setAppOptions] = useState<AppOption[]>([]);
  const [selectedAppId, setSelectedAppId] = useState<string>('');
  const [startDate, setStartDate] = useState<Date | null>(null);
  const [endDate, setEndDate] = useState<Date | null>(null);
  const [utilizationData, setUtilizationData] = useState<UtilizationData[]>([]);
  const [dateRangeType, setDateRangeType] = useState<'daily' | 'weekly' | 'monthly'>('daily');
  const [showInsights, setShowInsights] = useState(false);
  const [selectedInstances, setSelectedInstances] = useState<number[]>([]);
  const [viewMode, setViewMode] = useState<'all' | 'selected'>('all');

  useEffect(() => {
    fetchApps();
  }, []);

  const fetchApps = async () => {
    try {
      const response = await axios.get('/fetch_apps');
      if (response.data && Array.isArray(response.data.Data)) {
        const apps = response.data.Data.map((app: { _id: string }) => ({
          value: app._id,
          label: `AppID: ${app._id}`
        }));
        setAppOptions(apps);
      } else {
        console.error('Unexpected response format from /fetch_apps');
      }
    } catch (error) {
      console.error('Error fetching apps:', error);
    }
  };

  const formatDate = (date: Date): string => {
    return date.toISOString().slice(0, 19).replace('T', ' ') + '.00';
  };

  const fetchUtilizationData = async () => {
    if (!selectedAppId || !startDate || !endDate) return;

    const ranges: { from: Date; to: Date }[] = [];
    let current = new Date(startDate);

    while (current <= endDate) {
      let from = new Date(current);
      let to = new Date(current);

      switch (dateRangeType) {
        case 'weekly':
          from = new Date(current.setDate(current.getDate() - current.getDay()));
          to = new Date(from);
          to.setDate(to.getDate() + 6);
          break;
        case 'monthly':
          from = new Date(current.getFullYear(), current.getMonth(), 1);
          to = new Date(current.getFullYear(), current.getMonth() + 1, 0);
          break;
        case 'daily':
          to = new Date(from);
          break;
      }

      if (to > endDate) to = new Date(endDate);
      ranges.push({ from, to });

      if (dateRangeType === 'weekly') {
        current.setDate(current.getDate() + 7);
      } else if (dateRangeType === 'monthly') {
        current.setMonth(current.getMonth() + 1);
      } else {
        current.setDate(current.getDate() + 1);
      }
    }

    const allData: UtilizationData[] = [];
    for (const range of ranges) {
      const postData = {
        appID: selectedAppId,
        from_time: formatDate(range.from),
        to_time: formatDate(range.to)
      };

      try {
        const response = await axios.post('/fetch_utilisation', postData);
        if (response.data && Array.isArray(response.data.data)) {
          allData.push(...response.data.data);
        } else {
          console.error('Unexpected response format from /fetch_utilisation');
        }
      } catch (error) {
        console.error('Error fetching utilization data:', error);
      }
    }

    setUtilizationData(allData);
  };

  const handleDateRangeTypeChange = (type: 'daily' | 'weekly' | 'monthly') => {
    setDateRangeType(type);
    if (selectedAppId && startDate && endDate) {
      fetchUtilizationData();
    }
  };

  const processUtilizationData = (): ProcessedData[] => {
    const dataMap: { [key: string]: ProcessedData } = {};

    utilizationData.forEach(item => {
      if (!dataMap[item.datetime]) {
        dataMap[item.datetime] = { name: item.datetime };
      }
      dataMap[item.datetime][`Instance ${item.instance}`] = item.value;
    });

    return Object.values(dataMap);
  };

  const calculateInsights = () => {
    if (utilizationData.length === 0) return { averageUsage: '0', maxUsageDay: 'N/A', minUsageDay: 'N/A' };

    const totalUsage = utilizationData.reduce((acc, d) => acc + d.value, 0);
    const averageUsage = totalUsage / utilizationData.length;
    const maxUsageDay = utilizationData.reduce((max, d) => d.value > max.value ? d : max, utilizationData[0]);
    const minUsageDay = utilizationData.reduce((min, d) => d.value < min.value ? d : min, utilizationData[0]);

    return {
      averageUsage: averageUsage.toFixed(2),
      maxUsageDay: `${maxUsageDay.datetime} (${maxUsageDay.value}%)`,
      minUsageDay: `${minUsageDay.datetime} (${minUsageDay.value}%)`,
    };
  };

  const processedData = processUtilizationData();

  const calculateStats = () => {
    const allValues = processedData.flatMap(item => 
      Object.entries(item)
        .filter(([key]) => {
          if (viewMode === 'all') return key.startsWith('Instance');
          return key.startsWith('Instance') && selectedInstances.includes(parseInt(key.split(' ')[1]));
        })
        .map(([, value]) => value as number)
    );

    const peakLoad = allValues.length > 0 ? Math.max(...allValues) : 0;
    const minLoad = allValues.length > 0 ? Math.min(...allValues) : 0;
    const costIncurred = allValues.reduce((acc, val) => acc + val * 0.5, 0);

    return { peakLoad, minLoad, costIncurred };
  };

  const { peakLoad, minLoad, costIncurred } = calculateStats();

  const potentialSavings = processedData.reduce((acc, d) => 
    acc + Object.values(d)
      .filter((v): v is number => typeof v === 'number' && v < 50)
      .reduce((sum, v) => sum + v * 0.5 * 0.3, 0)
  , 0);

  const exportData = processedData.map(d => ({ ...d, instance: 'all instances' }));

  const instances = Array.from(new Set(utilizationData.map(d => d.instance)));

  const handleInstanceChange = (instance: number) => {
    setSelectedInstances(prev => 
      prev.includes(instance) 
        ? prev.filter(i => i !== instance)
        : [...prev, instance]
    );
    setViewMode('selected');
  };

  const handleViewModeChange = (mode: 'all' | 'selected') => {
    setViewMode(mode);
    if (mode === 'all') {
      setSelectedInstances([]);
    }
  };

  return (
    <div className="app-container">
      <div className="app-overview">
        <div className="header">
          <div className="top-row">
            <div className="app-selector">
              <select
                value={selectedAppId}
                onChange={(e) => setSelectedAppId(e.target.value)}
              >
                <option value="" disabled>Select App ID</option>
                {appOptions.map(({ value, label }) => (
                  <option key={value} value={value}>{label}</option>
                ))}
              </select>
            </div>
            <div className="date-range">
              <DatePicker
                selected={startDate}
                onChange={(date: Date | null) => setStartDate(date)}
                selectsStart
                startDate={startDate}
                endDate={endDate}
                dateFormat="dd/MM/yyyy"
                placeholderText="Start Date"
              />
              <DatePicker
                selected={endDate}
                onChange={(date: Date | null) => setEndDate(date)}
                selectsEnd
                startDate={startDate}
                endDate={endDate}
                minDate={startDate}
                dateFormat="dd/MM/yyyy"
                placeholderText="End Date"
              />
            </div>
            <div className="fetch-button">
              <button onClick={fetchUtilizationData}>Fetch Data</button>
            </div>
            <div className="range-selector">
              <button onClick={() => handleDateRangeTypeChange('daily')}>Daily</button>
              <button onClick={() => handleDateRangeTypeChange('weekly')}>Weekly</button>
              <button onClick={() => handleDateRangeTypeChange('monthly')}>Monthly</button>
            </div>
          </div>
          <div className="instance-selector">
            <label>
              <input
                type="radio"
                checked={viewMode === 'all'}
                onChange={() => handleViewModeChange('all')}
              />
              View All Instances
            </label>
            {instances.map(instance => (
              <label key={instance}>
                <input
                  type="checkbox"
                  checked={selectedInstances.includes(instance)}
                  onChange={() => handleInstanceChange(instance)}
                />
                Instance {instance}
              </label>
            ))}
          </div>
        </div>

        {showInsights && (
          <div className="insights">
            <h3>Insights:</h3>
            <p>Average Usage: {calculateInsights().averageUsage}%</p>
            <p>Max Usage Day: {calculateInsights().maxUsageDay}</p>
            <p>Min Usage Day: {calculateInsights().minUsageDay}</p>
            <p>Peak Load: {peakLoad}%</p>
            <p>Min Load: {minLoad}%</p>
            <p>Cost Incurred: ${costIncurred.toFixed(2)}</p>
            <p>Potential Savings: ${potentialSavings.toFixed(2)}</p>
          </div>
        )}

        <div className="chart-container">
          <ResponsiveContainer width="100%" height={400}>
            <LineChart
              data={processedData}
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Legend />
              {instances.map(instance => (
                <Line
                  key={instance}
                  type="monotone"
                  dataKey={`Instance ${instance}`}
                  stroke={selectedInstances.includes(instance) || viewMode === 'all' ? '#8884d8' : '#ccc'}
                  activeDot={{ r: 8 }}
                />
              ))}
              <Brush />
            </LineChart>
          </ResponsiveContainer>
        </div>

        <div className="export-button">
          <CSVLink
            data={exportData}
            filename={`utilization_data_${selectedAppId}.csv`}
            className="btn btn-primary"
            target="_blank"
          >
            Export Data to CSV
          </CSVLink>
        </div>
      </div>
    </div>
  );
};

export default AppOverview;
